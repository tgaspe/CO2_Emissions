# Theodoro Gasperin Terra Camargo
# 260842764

# Plot data

# Modules
from add_continents import*
from build_countries import*
from data_cleanup import*
import matplotlib.pyplot as plt
import doctest

def get_bar_co2_pc_by_continent(dict_countries, year):
    '''
    (dict, int) -> list
    takes a dictionary as input like the one
    generated by get_countries_from_file and an integer representing a year. The function should
    create a bar plot representing the co2 emissions per capita (in tonnes) produced by all the countries
    in each continent
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> get_bar_co2_pc_by_continent(d1, 2001)
    [0.20320332558992543, 67.01626016260163, 7.6609004739336495, 1.4196063588190764]
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_bar_co2_pc_by_continent(d2, 2000)
    >>> len(data)
    6
    >>> data[0] # AFRICA
    1.0975340644568221
    >>> data[3] # N. AMERICA
    14.739682155717825
    >>> round(data[4], 5) # OCEANIA
    12.66302
    '''
    
    continents_dict = get_iso_codes_by_continent("iso_codes_by_continent.tsv")
    
    # Create lists: continents co2 emissions list, and continents list
    co2_emissions = []
    continents = []
    
    for continent in sorted(continents_dict):
        # append continent to list of continents
        continents.append(continent)
        
        list_countries = []
        for iso in continents_dict[continent]:
            if iso in dict_countries:
                #print(iso)
                list_countries.append(dict_countries[iso])
            
        
        co2_per_capita_continent = Country.get_total_co2_emissions_per_capita_by_year(list_countries, year)
        co2_emissions.append(co2_per_capita_continent)
        
    
    # Remove continents with 0 co2:
    for item in co2_emissions[:]:
        if item == 0:
            i = co2_emissions.index(item)
            co2_emissions.remove(co2_emissions[i])
            continents.remove(continents[i])
    #print(co2_emissions, continents)
    
    # Create bar graph
    plt.bar(continents, co2_emissions)
    title = 'CO2 emissions per capita in ' + str(year) + ' by theodoro.gasperinterracamargo@mail.mcgill.ca'
    plt.title(title)
    #plt.xlabel()
    plt.ylabel('co2 (in tonnes)')
    filename = 'co2_pc_by_continent_'+str(year)+'.png'
    plt.savefig(filename)
    plt.show()
    
    return co2_emissions
    


def get_bar_historical_co2_by_continent(dict_countries, year):
    '''
    (dict, int) -> list
    Takes a dictionary as input like
    the one generated by get_countries_from_file and an integer representing a year. The function
    should create a bar plot representing the historical co2 emissions (in millions of tonnes) produced by
    all the countries in each continent. The bars should appear in alphabetical order, and the function
    should return a list of the values being plotted.
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> get_bar_historical_co2_by_continent(d1, 2015)
    [4.877, 207.54500000000002, 359.367, 149.34300000000002]
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_bar_historical_co2_by_continent(d2, 1990)
    >>> len(data)
    6
    >>> round(data[2],4) # EUROPE
    334210.701
    >>> data[4] # OCEANIA
    8488.463

    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_bar_historical_co2_by_continent(d2, 2018)
    >>> len(data)
    6
    >>> round(data[1], 5) # ASIA
    585465.903
    >>> round(data[4], 5) # OCEANIA
    19845.01
    '''
    continents_dict = get_iso_codes_by_continent("iso_codes_by_continent.tsv")
    
    # Create lists: continents co2 emissions list, and continents list
    co2_emissions = []
    continents = []
    
    for continent in sorted(continents_dict):
        # append continent to list of continents
        continents.append(continent)
        
        list_countries = []
        for iso in continents_dict[continent]:
            if iso in dict_countries:
                #print(iso)
                list_countries.append(dict_countries[iso])
            
        
        total_co2_continent = Country.get_total_historical_co2_emissions(list_countries, year)
        co2_emissions.append(total_co2_continent)
    
    # Remove continents with 0 co2:
    for item in co2_emissions[:]:
        if item == 0:
            i = co2_emissions.index(item)
            co2_emissions.remove(co2_emissions[i])
            continents.remove(continents[i])
    #print(co2_emissions, continents)
    
    # Create bar graph
    plt.bar(continents, co2_emissions)
    title = 'Historical CO2 emissions up to ' + str(year) + ' by theodoro.gasperinterracamargo@mail.mcgill.ca'
    plt.title(title)
    #plt.xlabel()
    plt.ylabel('co2 (in tonnes)')
    filename = 'hist_co2_by_continent_'+str(year)+'.png'
    plt.savefig(filename)
    plt.show()
    
    return co2_emissions

def get_bar_co2_pc_top_ten(dict_countries, year):
    '''
    (dict, int) -> list
    The function should create a bar plot
    representing the co2 emissions per capita (in tonnes) produced by the top 10
    producing countries in the dictionary (if the dictionary contains less than 10 countries,
    then you should graph all of them). The bars should appear in order of co2 produced, and the function
    should return a list of the values being plotted.
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> data = get_bar_co2_pc_top_ten(d1, 2001)
    >>> len(data)
    5
    >>> data[0]
    67.01626016260163
    >>> data[4]
    0.20320332558992543
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_bar_co2_pc_top_ten(d2, 2000)
    >>> len(data)
    10
    >>> data[0] # QAT
    58.388513513513516
    >>> data[4] # USA
    21.288834407209247
    >>> data[9] # SAU
    14.341511807975223
    '''
    # Create lists: continents co2 emissions list, and continents list
    co2_emissions = []
    countries = []
    
    # Create dict to use with get_top_n
    d = {}
    for iso in dict_countries:
        a = dict_countries[iso]
        b = a.get_co2_per_capita_by_year(year)
        if b != None:
            d[b] = a
     
    # Order d from low to high values
    d1 = {}
    for key in sorted(d):
        d1[d[key]] = key

    lista = Country.get_top_n(d1, 10)
    #print(lista)
    
    for iso, co2 in lista:
        co2_emissions.append(co2)
        countries.append(iso)
    #print(co2_emissions, countries)
    
    # Create bar graph
    plt.bar(countries, co2_emissions)
    title = 'Top 10 countries for CO2 emissions pc in ' + str(year) + ' by theodoro.gasperinterracamargo@mail.mcgill.ca'
    plt.title(title)
    #plt.xlabel()
    plt.ylabel('co2 (in tonnes)')
    filename = 'top_10_co2_pc_'+str(year)+'.png'
    plt.savefig(filename)
    plt.show()
    
    return co2_emissions



def get_bar_top_ten_historical_co2(dict_countries, year):
    '''
    (dict, int) -> list
    Create a bar plot representing the historical co2 emissions (in millions of tonnes) produced by the
    top 10 producing countries in the dictionary (if the dictionary contains less than 10 countries, then
    you should graph all of them).
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> get_bar_top_ten_historical_co2(d1, 2015)
    [306.696, 166.33, 149.34300000000002, 48.923, 41.215, 3.748, 3.324, 1.553, 0.0]
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_bar_top_ten_historical_co2(d2, 2018)
    >>> len(data)
    10
    >>> data[0] # USA
    404769.397
    >>> data[1] # CHN
    210201.179
    >>> data[8] # CAN
    32517.775
    '''
    
    # Create lists: continents co2 emissions list, and continents list
    co2_emissions = []
    countries = []
    
    # Create dict to use with get_top_n
    d = {}
    for iso in dict_countries:
        a = dict_countries[iso]
        b = a.get_historical_co2(year)
        if b != None:
            d[b] = a
    
    # Order d from low to high values
    d1 = {}
    for key in sorted(d):
        d1[d[key]] = key

    lista = Country.get_top_n(d1, 10)
    #print(lista)
    
    for iso, co2 in lista:
        co2_emissions.append(co2)
        countries.append(iso)
    #print(co2_emissions, countries)
    
    # Create bar graph
    plt.bar(countries, co2_emissions)
    title = 'Top 10 countries for historical CO2 up to ' + str(year) + ' by theodoro.gasperinterracamargo@mail.mcgill.ca'
    plt.title(title)
    #plt.xlabel()
    plt.ylabel('co2 (in millions of tonnes)')
    filename = 'top_10_his_co2_'+str(year)+'.png'
    plt.savefig(filename)
    plt.show()
    
    return co2_emissions


def get_plot_co2_emissions(dict_countries, list_iso, min_year, max_year):
    '''
    (dict, int) -> list
    Plots the co2 emissions of the selected countries (those whose
    ISO code appears in the input list) from min_year to max_year.
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_plot_co2_emissions(d2, ["USA", "CHN", "RUS", "DEU", "GBR"], 1990, 2000)
    >>> len(data)
    5
    >>> len(data[1]) # CHN
    11
    >>> data[0][:5] # USA
    [5121.179, 5071.564, 5174.671, 5281.387, 5375.034]
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_plot_co2_emissions(d2, ["USA", "CHN", "RUS", "DEU", "GBR"], 1800, 2000)
    >>> len(data[0]) # USA
    201
    >>> data[2][4] # RUS
    0.0
    >>> data[4][190] # GBR
    600.773
    >>> data[3][200] # DEU
    900.376
    '''
    list_co2_countries = []
    markers = ['v--b', '>--k', 's--c', 'p--r', 'o--g']

    
    for iso in list_iso:
        
        list_country = []
        a = dict_countries[iso]
        year = min_year + 0
        y = min_year + 0
        
        while year <= max_year:
            if year in a.co2_emissions:
                list_country.append(a.co2_emissions[year])
            elif year not in a.co2_emissions:
                list_country.append(0.0)
            year += 1
    
        list_co2_countries.append(list_country)
    
    
    step = (max_year - min_year)//10
    y_cords = []
    x_cord = range(min_year, (max_year + step), step )
    
    for country_data in list_co2_countries:
        j = 0
        y_cord =[]
        while j < len(country_data):
            y_cord.append(country_data[j])
            j += step
        y_cords.append(y_cord)
    
    # Plot data
    i = 0
    for cord in y_cords:
        plt.plot(x_cord, cord, markers[i])
        if i == 4:
            i = 0
            continue
        i += 1
    
    title = 'CO2 emissions between ' + str(min_year) +' and ' + str(max_year) + ' by theodoro.gasperinterracamargo@mail.mcgill.ca'
    plt.title(title)
    #plt.xlabel()
    plt.legend(list_iso, loc='best')
    plt.ylabel('co2 (in millions of tonnes)')
    filename = 'co2_emissions_' + str(min_year) +'_'+ str(max_year) +'.png'
    plt.savefig(filename)
    plt.show() 
    
    return list_co2_countries


if __name__ == "__main__":
    doctest.testmod()  